/* Include my own library from git
methods in libraries, they should be called in script {} statements
* setup: example of multiple method definition in one lib.
    - setup.get_branch():
    - setup.get_url()
* clone
    - clone.clone(): used to provide an example on how to call steps like "git" in lib
global variables which behave similarly to built-in steps
* myprebuild()
* mybuild()
* mycoverage()
* mytest()
*/
library identifier: 'SimpleJenkinsPipelineLib@master', 
        retriever: modernSCM(
                    [$class: 'GitSCMSource', 
                    credentialsId: 'GitHub', 
                    remote: 'https://github.com/01ive/SimpleJenkinsPipelineLib.git'])

// Script properties definition
properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10'))])

// Method allowing to clean workspace folder and temp folder 
def cleanAllWs() {
    cleanWs()
    dir("${workspace}@tmp") {
        deleteDir()
    }
}


pipeline {
    // Define to use a custom workspace in pipeline, otherwise just use "agent any"
    agent {
        node {
            label 'master'
            customWorkspace 'D:\\workspace\\Jenkins\\workspace'
        }
    }

    stages {
        // Stage for get setup for myproject (example of method call)
        stage('Get setup') {
            steps {
                // Method in libs in Declarative pipeline must be called useing script statement
                script {
                    my_branch = setup.get_branch()
                    my_url = setup.get_url()
                }
            }
        }
        // Stage to clone my project
        stage('Clone') {
            steps {
                script {
                    clone.clone(my_branch, my_url)
                }
            }
        }
        stage('CMake') {
            steps {
                myprebuild()
            }
        }
        stage('Build') {
            steps {
                mybuild()
            }
        }
        stage('Test') {
            steps {
                mytest()  
            }
        }
        stage('Coverage analysis') {
            steps {
                mycoverage()
                bat label: '', script: '"C://Program Files//7-Zip//"7z a .//build//html_coverage.7z .//build//html_coverage'
            }
        }
    }
    post {
        success {
            archiveArtifacts artifacts: 'build//*.xml', fingerprint: true, onlyIfSuccessful: true
            archiveArtifacts artifacts: 'build//*.7z', fingerprint: true, onlyIfSuccessful: true

            // Used to view in Jenkins test results
            junit 'build//*.xml'

            // Used to view in Jenkins coverage results
            publishHTML target: [
                allowMissing: false,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: 'build//html_coverage',
                reportFiles: 'index.html',
                reportName: 'LCov Report'
            ]
            cleanAllWs()
        }
        failure {
            cleanAllWs()
        }
    }
}
